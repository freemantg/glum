// Mocks generated by Mockito 5.4.2 from annotations
// in glum_mood_tracker/test/application/stats/stats_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:glum_mood_tracker/domain/failures/failures.dart' as _i5;
import 'package:glum_mood_tracker/domain/models/models.dart' as _i6;
import 'package:glum_mood_tracker/infrastructure/repositories/stats_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StatsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStatsRepository extends _i1.Mock implements _i3.StatsRepository {
  MockStatsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.StatusFailure, int>> countAllStories() =>
      (super.noSuchMethod(
        Invocation.method(
          #countAllStories,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.StatusFailure, int>>.value(
            _FakeEither_0<_i5.StatusFailure, int>(
          this,
          Invocation.method(
            #countAllStories,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.StatusFailure, int>>);
  @override
  _i4.Future<_i2.Either<_i5.StatusFailure, double>> glumAverage() =>
      (super.noSuchMethod(
        Invocation.method(
          #glumAverage,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.StatusFailure, double>>.value(
            _FakeEither_0<_i5.StatusFailure, double>(
          this,
          Invocation.method(
            #glumAverage,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.StatusFailure, double>>);
  @override
  _i4.Future<_i2.Either<_i5.StatusFailure, Map<int, int>>> glumDistribution() =>
      (super.noSuchMethod(
        Invocation.method(
          #glumDistribution,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.StatusFailure, Map<int, int>>>.value(
                _FakeEither_0<_i5.StatusFailure, Map<int, int>>(
          this,
          Invocation.method(
            #glumDistribution,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.StatusFailure, Map<int, int>>>);
  @override
  _i4.Future<_i2.Either<_i5.StatusFailure, Map<DateTime, int>>> averageWeek() =>
      (super.noSuchMethod(
        Invocation.method(
          #averageWeek,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.StatusFailure, Map<DateTime, int>>>.value(
                _FakeEither_0<_i5.StatusFailure, Map<DateTime, int>>(
          this,
          Invocation.method(
            #averageWeek,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.StatusFailure, Map<DateTime, int>>>);
  @override
  _i4.Future<_i2.Either<_i5.StatusFailure, Map<DateTime, int>>> yearInGlums() =>
      (super.noSuchMethod(
        Invocation.method(
          #yearInGlums,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.StatusFailure, Map<DateTime, int>>>.value(
                _FakeEither_0<_i5.StatusFailure, Map<DateTime, int>>(
          this,
          Invocation.method(
            #yearInGlums,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.StatusFailure, Map<DateTime, int>>>);
  @override
  _i4.Stream<_i2.Either<_i5.StatusFailure, Map<_i6.TagModel, int>>>
      trendingTags() => (super.noSuchMethod(
            Invocation.method(
              #trendingTags,
              [],
            ),
            returnValue: _i4.Stream<
                _i2.Either<_i5.StatusFailure, Map<_i6.TagModel, int>>>.empty(),
          ) as _i4
              .Stream<_i2.Either<_i5.StatusFailure, Map<_i6.TagModel, int>>>);
  @override
  _i4.Stream<_i2.Either<_i5.StatusFailure, Map<_i6.TagModel, int>>>
      tagsByMoodsOrGlums(bool? filterByMoods) => (super.noSuchMethod(
            Invocation.method(
              #tagsByMoodsOrGlums,
              [filterByMoods],
            ),
            returnValue: _i4.Stream<
                _i2.Either<_i5.StatusFailure, Map<_i6.TagModel, int>>>.empty(),
          ) as _i4
              .Stream<_i2.Either<_i5.StatusFailure, Map<_i6.TagModel, int>>>);
}
